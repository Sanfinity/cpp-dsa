#include <iostream>

using namespace std;

void printName(int n, string name) {
    if (n <= 0) {
        return;
    }
    cout << name << endl;
    printName(n - 1, name);
}

void printLinear(int n, int i = 1) {
    if (i > n)  return;
    cout << i << " ";
    printLinear(n, i + 1);
}

void printLinearBacktracking(int n) {
    if (n < 1) return;
    printLinearBacktracking(n - 1);
    cout << n << " ";
}

void sumParameterised(int n, int sum) {
    if (n < 0) {
        cout << "Sum is " << sum << endl;
        return;
    }
    sumParameterised(n - 1, sum + n);
}

int sumFunctional(int n) {
    if (n < 1) {
        return 0;
    }
    return n + sumFunctional(n - 1);
}

int NFactorial(int n) {
    if (n == 1) {
        return 1;
    }
    return n * NFactorial(n - 1);
}

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void reverseArray(int a[], int l, int r) {
    if (l >= r) {
        return;
    }
    swap(a[l], a[r]);
    reverseArray(a, l + 1, r - 1);
}

bool checkPalindrome(string& input, int i = 0) {
    if (i >= input.size() / 2)
        return true;
    if (input[i] != input[input.size() - i - 1])
        return false;
    return checkPalindrome(input, i + 1);
}

int fib(int n) {
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}

int main()
{
    cout << "\n###### START OF PROGRAM ######\n";

    // Recursion = A function call itself

    // Print name N times
    int n = 5;
    string name = "sanfi";
    printName(n, name); // O(N) & space = O(N)

    // Print linearly from 1 to N
    n = 10;
    printLinear(n);
    cout << endl;
    // By backtracking
    printLinearBacktracking(n);
    cout << endl;

    // Sum of first N numbers -> parameter / functional
    // Parameterised way
    // Using an iterator i
    n = 4;
    sumParameterised(n, 0);
    cout << "Sum is " << sumFunctional(n) << endl;

    // Factorial of N
    n = 5;
    cout << "Factorial is " << NFactorial(n) << endl;

    // Reverse an Array
    int a[] = { 1,2,3,4,5 };
    for (int it : a) {
        cout << it << " ";
    }
    cout << endl;
    reverseArray(a, 0, sizeof(a) / sizeof(int) - 1);
    for (int it : a) {
        cout << it << " ";
    }
    cout << endl;

    // Check if a given string is palindrome or not
    string sample = "madam";
    cout << "IsPalindrome of " << sample << " is " << checkPalindrome(sample) << endl;

    // Multiple Recursion calls
    // Generate Fibonacci of N digits
    // TC is O(2^n)
    n = 4;
    cout << fib(n - 1) << endl;

    cout << "\n###### END OF PROGRAM ######\n";
}
